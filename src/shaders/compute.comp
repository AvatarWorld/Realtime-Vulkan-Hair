#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define NUM_CURVE_POINTS 10
#define EPSILON 0.00001
#define DAMPING 0.998
#define NUM_COLLIDERS 6
#define GRID_DIM 64
#define GRID_HEIGHT 7
#define SCALE 1000000.0

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Collider {
	mat4 transform;
	mat4 inv;
	mat4 invTrans;
};

layout(set = 2, binding = 0) uniform Colliders {
	Collider colliders[NUM_COLLIDERS];
};

struct GridCell {
	ivec3 velocity;
	int density;
};

layout(set = 3, binding = 0) buffer Grid {
	GridCell cells[GRID_DIM * GRID_DIM * GRID_DIM];
} grid;

struct Strand {
    vec4 curvePoints[NUM_CURVE_POINTS];
	vec4 curveVels[NUM_CURVE_POINTS];
	vec4 correctionVecs[NUM_CURVE_POINTS];
};

layout(set = 4, binding = 0) buffer InStrands {
	Strand inStrands[];
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
layout(set = 4, binding = 1) buffer NumStrands {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
	  uint firstInstance; // = 0
} numStrands;


bool EllipsoidCollision(Collider c, vec3 point) {
	vec4 transformedPoint = c.inv * vec4(point, 1.0);
	return (distance(transformedPoint.xyz, vec3(0.0)) <= 1.0);
}


vec3 GetEllipsoidNormal(Collider c, vec3 point) {
	vec3 normal = vec3(c.inv * vec4(point, 1.0));
	return normalize(vec3(c.invTrans * vec4(normal, 0.0)));
}


vec3 GetPointOnEllipsoid(Collider c, vec3 point) {
	vec3 transformedPoint = normalize(vec3(c.inv * vec4(point, 1.0)));
	return vec3(c.transform * vec4(transformedPoint, 1.0));
}


// 2D Random
float random(vec2 p) {
    return fract(sin(dot(p.xy, vec2(12.9898,78.233))) * 43758.5453123);
}


// 2D Noise based on Morgan McGuire @morgan3d
// https://www.shadertoy.com/view/4dS3Wd
float noise(vec2 p) {
    vec2 i = floor(p);
    vec2 f = fract(p);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));

    // Smooth Interpolation with Cubic Hermine Curve
    vec2 u = f * f * (3.0 - 2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}


// https://thebookofshaders.com/13/
#define OCTAVES 6
float fbm(vec2 p) {
    float value = 0.0;
    float amplitude = 0.5;
    float frequency = 0.1;

    for (int i = 0; i < OCTAVES; i++) {
        value += amplitude * noise(p);
        p *= 2.0;
        amplitude *= 0.5;
    }
    return value;
}


void main() {
	// Reset the number of blades to 0
	uint threadIdx = gl_GlobalInvocationID.x;
	if (threadIdx == 0) {
		numStrands.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

	vec3 gravityDir = vec3(0.f, -1.f, 0.f);
	float gravityAcc = 9.81f;
	vec3 gravity = gravityDir * gravityAcc;
	
	Strand strand = inStrands[threadIdx];
	
	// Temporarily hard codes radius between curve points
	float strandLength = 2.5f;
	float radius = strandLength / (NUM_CURVE_POINTS - 1.0);

	float dt = deltaTime * 1.0;

	for (int i = 1; i < NUM_CURVE_POINTS; i++) {
		vec3 currentPos = strand.curvePoints[i].xyz;
		vec3 currentVel = strand.curveVels[i].xyz;
		vec3 parentPos = strand.curvePoints[i - 1].xyz;
		
		// Add gravity
		vec3 force = vec3(0.0, -9.8, 0.0);
//		force += 10.0 * vec3(2.0 * sin(totalTime * 2.0) * cos(currentPos.y * 10.0) * sin((currentPos.y + 5.0) * 15.0), 0.0, -clamp(currentPos.y * 2.0, 0.2, 2.0));
//		force += 7.0 * fbm(vec2(sin(totalTime), cos(totalTime))) * vec3(2.0 * sin(totalTime * 2.0) * cos(currentPos.y * 10.0) * sin((currentPos.y + 5.0) * 15.0), 4.0 * sin(currentPos.z * 5.0 + totalTime * 3.0), -0.6 * (currentPos.y + 3.0));
	
		// Add penalty force for colliders
		int numColliders = 0;
		vec3 addedForce = vec3(0.0);

		for (int j = 0; j < NUM_COLLIDERS; j++) {
			Collider c = colliders[j];
			if (j == 0) {
				float radius = 1.0;
				if (distance(currentPos, c.transform[3].xyz) < radius) {
					float k = 1900.0; // spring constant, as large as possible without exploding
					float d = radius - distance(currentPos, c.transform[3].xyz);
					vec3 normal = normalize(currentPos - c.transform[3].xyz); // normal of collision surface at point of collision
					addedForce += vec3(k * d * normal); // penalty spring force
					numColliders = numColliders + 1;
				}
			}
			else {
				// Add penalty force to push hair outside of collision object
				if (EllipsoidCollision(c, currentPos.xyz)) {
					float k = 1900.0; // spring constant, as large as possible without exploding
					float d = distance(GetPointOnEllipsoid(c, currentPos.xyz), currentPos.xyz);
					vec3 normal = normalize(GetEllipsoidNormal(c, currentPos.xyz)); // normal of collision surface at point of collision
					addedForce += vec3(k * d * normal); // penalty spring force
					numColliders = numColliders + 1;
				} 
			}
		}

		if (numColliders > 0) {
			force += addedForce /  float(numColliders);
		}

		// Get predicted position based on position, velocity, and force
		vec3 predictedPos = currentPos + dt * currentVel + dt * dt * force;
		vec3 newPos = predictedPos;

		// Apply follow the leader constraint
		vec3 direction = normalize(predictedPos - parentPos);
		newPos = parentPos + radius * direction;

		// Update buffers and correction vectors
		vec3 newVel = (newPos - currentPos) / dt;
		strand.curvePoints[i] = vec4(newPos, 1.0);
		strand.curveVels[i] = DAMPING * vec4(newVel, 0.0); 
		if (length(strand.curveVels[i]) > 10.0) {
			strand.curveVels[i] = normalize(strand.curveVels[i]) * 10.0;
		}
		strand.correctionVecs[i] = DAMPING * vec4((newPos - predictedPos), 0.0);
	}

	// Setup grid parameters:
	float h = float(GRID_HEIGHT) / float(GRID_DIM);
	vec3 origin = vec3(-3.0, -2.0, -5.0);

	
	barrier(); // Wait until all threads have reached here

	for (int i = 1; i < NUM_CURVE_POINTS; ++i) {
		// Apply velocity correction term
		if (i != 0 && i != NUM_CURVE_POINTS - 1) {
			strand.curveVels[i] -= vec4(strand.correctionVecs[i + 1].xyz / dt, 0.0);
		}

		// Get grid index position of curve point
		vec3 currPos = strand.curvePoints[i].xyz;
		float x = ((currPos.x - origin.x) / h);
		float y = ((currPos.y - origin.y) / h);
		float z = ((currPos.z - origin.z) / h);

		// Transfer Velocity and density to grid
		int xmin = max(int(floor(x)), 0);
		int xmax = min(int(floor(x)) + 1, GRID_DIM - 1);
		int ymin = max(int(floor(y)), 0);
		int ymax = min(int(floor(y)) + 1, GRID_DIM - 1);
		int zmin = max(int(floor(z)), 0);
		int zmax = min(int(floor(z)) + 1, GRID_DIM - 1);
							
		for (int a = xmin; a <= xmax; ++a) {
			for (int b = ymin; b <= ymax; ++b) {
				for (int c = zmin; c <= zmax; ++c) {
					int index = a + b * GRID_DIM + c * GRID_DIM * GRID_DIM;
					if (index < GRID_DIM * GRID_DIM * GRID_DIM) {
						// Get weights in each dimension
						float xWeight = clamp(1.0 - abs(x - a), 0.0, 1.0);
						float yWeight = clamp(1.0 - abs(y - b), 0.0, 1.0);
						float zWeight = clamp(1.0 - abs(z - c), 0.0, 1.0);

						float totalWeight = xWeight * yWeight * zWeight;
						vec3 weightedVelocity = totalWeight * strand.curveVels[i].xyz;
						
						// atomic add weighted velocity and density to grid
						atomicAdd(grid.cells[index].velocity[0], int(SCALE * weightedVelocity.x));
						atomicAdd(grid.cells[index].velocity[1], int(SCALE * weightedVelocity.y));
						atomicAdd(grid.cells[index].velocity[2], int(SCALE * weightedVelocity.z));
						atomicAdd(grid.cells[index].density, int(SCALE * totalWeight));
					}
				}
			}
		}
	}

	barrier(); // Wait until all threads have reached here

	for (int i = 1; i < NUM_CURVE_POINTS; ++i) {
		// Get index grid space position
		vec3 currPos = strand.curvePoints[i].xyz;
		float x = ((currPos.x - origin.x) / h);
		float y = ((currPos.y - origin.y) / h);
		float z = ((currPos.z - origin.z) / h);

		// Transfer velocity from grid back to the point
		int xmin = max(int(floor(x)), 0);
		int xmax = min(int(floor(x)) + 1, GRID_DIM - 1);
		int ymin = max(int(floor(y)), 0);
		int ymax = min(int(floor(y)) + 1, GRID_DIM - 1);
		int zmin = max(int(floor(z)), 0);
		int zmax = min(int(floor(z)) + 1, GRID_DIM - 1);

		vec3 gridVelocity = vec3(0.0);
							
		for (int a = xmin; a <= xmax; ++a) {
			for (int b = ymin; b <= ymax; ++b) {
				for (int c = zmin; c <= zmax; ++c) {
					int index = a + b * GRID_DIM + c * GRID_DIM * GRID_DIM;
					if (index < GRID_DIM * GRID_DIM * GRID_DIM) {

						int density = grid.cells[index].density;
						if (density > 0) {
							float xWeight = clamp(1.0 - abs(x - a), 0.0, 1.0);
							float yWeight = clamp(1.0 - abs(y - b), 0.0, 1.0);
							float zWeight = clamp(1.0 - abs(z - c), 0.0, 1.0);

							float totalWeight = xWeight * yWeight * zWeight;

							gridVelocity += totalWeight * (1.0 / float(grid.cells[index].density)) * vec3(float(grid.cells[index].velocity[0]), float(grid.cells[index].velocity[1]), float(grid.cells[index].velocity[2]));
						}					
					}
				}
			}
		}

		// Mix previous velocity and grid velocity using friction
		float friction = 0.08;
		strand.curveVels[i] = vec4((1.0 - friction) * strand.curveVels[i].xyz + friction * gridVelocity, 0.0);	
	}

	inStrands[threadIdx] = strand;

	atomicAdd(numStrands.vertexCount, 1);
}
