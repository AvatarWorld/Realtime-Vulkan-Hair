#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Strand {
    vec4 controlPoints[3];
};

layout(set = 2, binding = 0) buffer InStrands {
	Strand inStrands[];
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
layout(set = 2, binding = 1) buffer NumStrands {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
	  uint firstInstance; // = 0
} numStrands;


void main() {
	// Reset the number of blades to 0
	uint threadIdx = gl_GlobalInvocationID.x;
	if (threadIdx == 0) {
		numStrands.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

	vec3 gravityDir = vec3(0.f, -1.f, 0.f);
	float gravityAcc = 9.81f;
	vec3 gravity = gravityDir * gravityAcc;

	Strand strand = inStrands[threadIdx];
	for (int i = 1; i < 3; i++) {
		vec4 controlPoint = strand.controlPoints[i];
		controlPoint += vec4(gravity * deltaTime, 0.f);
		strand.controlPoints[i] = controlPoint;
	}
	//inStrands[threadIdx] = strand;
	

	atomicAdd(numStrands.vertexCount, 1);
}
