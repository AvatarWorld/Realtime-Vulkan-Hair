#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define NUM_CONTROL_POINTS 3
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Strand {
    vec4 controlPoints[NUM_CONTROL_POINTS];
	vec4 controlVels[NUM_CONTROL_POINTS];
	vec4 correctionVecs[NUM_CONTROL_POINTS];
};

layout(set = 2, binding = 0) buffer InStrands {
	Strand inStrands[];
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
layout(set = 2, binding = 1) buffer NumStrands {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
	  uint firstInstance; // = 0
} numStrands;


void main() {
	// Reset the number of blades to 0
	uint threadIdx = gl_GlobalInvocationID.x;
	if (threadIdx == 0) {
		numStrands.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

	vec3 gravityDir = vec3(0.f, -1.f, 0.f);
	float gravityAcc = 9.81f;
	vec3 gravity = gravityDir * gravityAcc;

	float radius = 0.5;

	Strand strand = inStrands[threadIdx];
	for (int i = 1; i < NUM_CONTROL_POINTS; i++) {
		vec4 currentPos = strand.controlPoints[i];
		vec4 currentVel = strand.controlVels[i];
		vec4 parentPos = strand.controlPoints[i - 1];
		vec4 force = vec4(0.0, -9.8, 0.0, 0.0);
		vec4 predictedPos = currentPos + deltaTime * currentVel + deltaTime * deltaTime * force;
	
		vec4 direction = normalize(predictedPos - parentPos);
		vec4 newPos = parentPos + radius * direction;

		vec4 newVel = (newPos - currentPos) / deltaTime;
		strand.controlPoints[i] = newPos;
		strand.controlVels[i] = newVel;
		strand.correctionVecs[i] = newPos - predictedPos;
	}
	for (int i = 1; i < NUM_CONTROL_POINTS - 1; ++i) {
		strand.controlVels[i] -= strand.correctionVecs[i + 1] / deltaTime;
	}

	inStrands[threadIdx] = strand;
	

	atomicAdd(numStrands.vertexCount, 1);
}
